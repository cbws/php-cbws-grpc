<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cbws/virtual_machines/affinity/v1alpha1/affinity.proto

namespace Cbws\VirtualMachines\Grpc\Affinity\V1alpha1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Defines a set of instances (namely those matching the labelSelector relative to the given namespace(s)) that this instance should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a instance of the set of instances is running
 *
 * Generated from protobuf message <code>cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm</code>
 */
class InstanceAffinityTerm extends \Google\Protobuf\Internal\Message
{
    /**
     * A label query over a set of resources, in this case instances.
     *
     * Generated from protobuf field <code>.cbws.virtual_machines.affinity.v1alpha1.LabelSelector label_selector = 1;</code>
     */
    protected $label_selector = null;
    /**
     * This instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.
     *
     * Generated from protobuf field <code>string topology_key = 2;</code>
     */
    protected $topology_key = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Cbws\VirtualMachines\Grpc\Affinity\V1alpha1\LabelSelector $label_selector
     *           A label query over a set of resources, in this case instances.
     *     @type string $topology_key
     *           This instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.
     * }
     */
    public function __construct($data = NULL) {
        \Cbws\VirtualMachines\Grpc\Affinity\V1alpha1\Metadata\Affinity::initOnce();
        parent::__construct($data);
    }

    /**
     * A label query over a set of resources, in this case instances.
     *
     * Generated from protobuf field <code>.cbws.virtual_machines.affinity.v1alpha1.LabelSelector label_selector = 1;</code>
     * @return \Cbws\VirtualMachines\Grpc\Affinity\V1alpha1\LabelSelector
     */
    public function getLabelSelector()
    {
        return $this->label_selector;
    }

    /**
     * A label query over a set of resources, in this case instances.
     *
     * Generated from protobuf field <code>.cbws.virtual_machines.affinity.v1alpha1.LabelSelector label_selector = 1;</code>
     * @param \Cbws\VirtualMachines\Grpc\Affinity\V1alpha1\LabelSelector $var
     * @return $this
     */
    public function setLabelSelector($var)
    {
        GPBUtil::checkMessage($var, \Cbws\VirtualMachines\Grpc\Affinity\V1alpha1\LabelSelector::class);
        $this->label_selector = $var;

        return $this;
    }

    /**
     * This instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.
     *
     * Generated from protobuf field <code>string topology_key = 2;</code>
     * @return string
     */
    public function getTopologyKey()
    {
        return $this->topology_key;
    }

    /**
     * This instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.
     *
     * Generated from protobuf field <code>string topology_key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setTopologyKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->topology_key = $var;

        return $this;
    }

}

