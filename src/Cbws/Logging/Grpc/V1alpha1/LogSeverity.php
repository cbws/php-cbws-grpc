<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cbws/logging/v1alpha1/log_severity.proto

namespace Cbws\Logging\Grpc\V1alpha1;

use UnexpectedValueException;

/**
 * The severity of the event described in a log entry, expressed as one of the
 * standard severity levels listed below.  For your reference, the levels are
 * assigned the listed numeric values. The effect of using numeric values other
 * than those listed is undefined.
 * You can filter for log entries by severity.  For example, the following
 * filter expression will match log entries with severities `INFO`, `NOTICE`,
 * and `WARNING`:
 *     severity > DEBUG AND severity <= WARNING
 * If you are writing log entries, you should map other severity encodings to
 * one of these standard levels. For example, you might map all of Java's FINE,
 * FINER, and FINEST levels to `LogSeverity.DEBUG`. You can preserve the
 * original severity level in the log entry payload if you wish.
 *
 * Protobuf type <code>cbws.logging.v1alpha1.LogSeverity</code>
 */
class LogSeverity
{
    /**
     * (0) The log entry has no assigned severity level.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_UNSPECIFIED = 0;</code>
     */
    const LOG_SEVERITY_UNSPECIFIED = 0;
    /**
     * (100) Debug or trace information.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_DEBUG = 100;</code>
     */
    const LOG_SEVERITY_DEBUG = 100;
    /**
     * (200) Routine information, such as ongoing status or performance.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_INFO = 200;</code>
     */
    const LOG_SEVERITY_INFO = 200;
    /**
     * (300) Normal but significant events, such as start up, shut down, or
     * a configuration change.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_NOTICE = 300;</code>
     */
    const LOG_SEVERITY_NOTICE = 300;
    /**
     * (400) Warning events might cause problems.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_WARNING = 400;</code>
     */
    const LOG_SEVERITY_WARNING = 400;
    /**
     * (500) Error events are likely to cause problems.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_ERROR = 500;</code>
     */
    const LOG_SEVERITY_ERROR = 500;
    /**
     * (600) Critical events cause more severe problems or outages.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_CRITICAL = 600;</code>
     */
    const LOG_SEVERITY_CRITICAL = 600;
    /**
     * (700) A person must take an action immediately.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_ALERT = 700;</code>
     */
    const LOG_SEVERITY_ALERT = 700;
    /**
     * (800) One or more systems are unusable.
     *
     * Generated from protobuf enum <code>LOG_SEVERITY_EMERGENCY = 800;</code>
     */
    const LOG_SEVERITY_EMERGENCY = 800;

    private static $valueToName = [
        self::LOG_SEVERITY_UNSPECIFIED => 'LOG_SEVERITY_UNSPECIFIED',
        self::LOG_SEVERITY_DEBUG => 'LOG_SEVERITY_DEBUG',
        self::LOG_SEVERITY_INFO => 'LOG_SEVERITY_INFO',
        self::LOG_SEVERITY_NOTICE => 'LOG_SEVERITY_NOTICE',
        self::LOG_SEVERITY_WARNING => 'LOG_SEVERITY_WARNING',
        self::LOG_SEVERITY_ERROR => 'LOG_SEVERITY_ERROR',
        self::LOG_SEVERITY_CRITICAL => 'LOG_SEVERITY_CRITICAL',
        self::LOG_SEVERITY_ALERT => 'LOG_SEVERITY_ALERT',
        self::LOG_SEVERITY_EMERGENCY => 'LOG_SEVERITY_EMERGENCY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

